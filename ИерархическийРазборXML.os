Перем ОбщийФайлПравил;
Перем НеобработанныеУзлы;
Перем КаталогИсходныхКодов;

Процедура ЗаписатьКлючевыеСвойстваПравилОбмена()
	
	ЗаголовкиПравил = Новый COMОбъект("MSXML2.DOMDocument.6.0");
	ЗаголовкиПравил.async = false;

	Элемент_ПравилаОбмена = ЗаголовкиПравил.appendChild(ЗаголовкиПравил.importNode(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена"), Ложь));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ВерсияФормата"));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Ид"));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Наименование"));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ДатаВремяСоздания"));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Источник"));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Приемник"));

	ЗаписатьКлючевыеСвойстваПравилОбмена_Расширение(Элемент_ПравилаОбмена);
	
	Элемент_Параметры 						= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Параметры");
	Элемент_Обработки 						= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Обработки");
	Элемент_ПравилаКонвертацииОбъектов 	= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ПравилаКонвертацииОбъектов");
	Элемент_ПравилаВыгрузкиДанных			= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ПравилаВыгрузкиДанных");
	Элемент_ПравилаОчисткиДанных			= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ПравилаОчисткиДанных");
	Элемент_Алгоритмы							= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Алгоритмы");
	Элемент_Запросы							= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/Запросы");

	// ДобавитьНеобработанныеУзлы(Элемент_Параметры, Элемент_Обработки, Элемент_ПравилаКонвертацииОбъектов, Элемент_ПравилаВыгрузкиДанных, Элемент_ПравилаОчисткиДанных, Элемент_Алгоритмы, Элемент_Запросы);
	ДобавитьНеобработанныеУзлы(Элемент_Параметры, Элемент_Обработки, Элемент_ПравилаКонвертацииОбъектов, Элемент_ПравилаВыгрузкиДанных, Элемент_ПравилаОчисткиДанных, Элемент_Алгоритмы, Элемент_Запросы);
	
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_Параметры, Ложь));
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_Обработки, Ложь));
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_ПравилаКонвертацииОбъектов, Ложь));
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_ПравилаВыгрузкиДанных, Ложь));
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_ПравилаОчисткиДанных, Ложь));
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_Алгоритмы, Ложь));
	Элемент_ПравилаОбмена.appendChild(ЗаголовкиПравил.importNode(Элемент_Запросы, Ложь));

	ЗаголовкиПравил.save(КаталогИсходныхКодов + "ПравилаОбмена.xml");

КонецПроцедуры

Процедура ЗаписатьКлючевыеСвойстваПравилОбмена_Расширение(Элемент_ПравилаОбмена)
	
	Элемент_ПослеЗагрузкиПравилОбмена 	= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ПослеЗагрузкиПравилОбмена");
	Элемент_ПередВыгрузкойДанных 			= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ПередВыгрузкойДанных");
	Элемент_ПослеЗагрузкиОбъекта 			= ОбщийФайлПравил.selectSingleNode("//ПравилаОбмена/ПослеЗагрузкиОбъекта");

	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.importNode(Элемент_ПослеЗагрузкиПравилОбмена, Ложь));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.importNode(Элемент_ПередВыгрузкойДанных, Ложь));
	Элемент_ПравилаОбмена.appendChild(ОбщийФайлПравил.importNode(Элемент_ПередВыгрузкойДанных, Ложь));
	
	КаталогРасширений = КаталогИсходныхКодов + "Ext\";
	СоздатьКаталог(КаталогРасширений);
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + Элемент_ПослеЗагрузкиПравилОбмена.nodeName + ".bsl");
	ЗаписьТекста.ЗаписатьСтроку(Элемент_ПослеЗагрузкиПравилОбмена.text);
	ЗаписьТекста.Закрыть();
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + Элемент_ПередВыгрузкойДанных.nodeName + ".bsl");
	ЗаписьТекста.ЗаписатьСтроку(Элемент_ПередВыгрузкойДанных.text);
	ЗаписьТекста.Закрыть();
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + Элемент_ПослеЗагрузкиОбъекта.nodeName + ".bsl");
	ЗаписьТекста.ЗаписатьСтроку(Элемент_ПослеЗагрузкиОбъекта.text);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьКлючевыеКоллекцииПравилОбмена()
	
	Для Каждого НеобработанныйЭлемент Из НеобработанныеУзлы Цикл
		
		ИмяКоллекции = СтрЗаменить(НеобработанныйЭлемент.Ключ, "Элемент_", "");
		КаталогКоллекции = КаталогИсходныхКодов + ИмяКоллекции + "\";

		Если НеобработанныйЭлемент.Значение.hasChildNodes() Тогда
			УдалитьФайлы(КаталогКоллекции);
			СоздатьКаталог(КаталогКоллекции);
		Иначе
			УдалитьФайлы(КаталогКоллекции);
			Продолжить;
		КонецЕсли;
		
		ЗаписатьЭлементВФайл(НеобработанныйЭлемент.Значение, КаталогКоллекции + ИмяКоллекции + ".xml");
	
	КонецЦикла;
	
	РазобратьКоллекциюАлгоритмы(НеобработанныеУзлы.Получить("Элемент_Алгоритмы"), КаталогИсходныхКодов + "Алгоритмы\");
	РазобратьКоллекциюЗапросы(НеобработанныеУзлы.Получить("Элемент_Запросы"), КаталогИсходныхКодов + "Запросы\");
	РазобратьКоллекциюПравилаВыгрузкиДанных(НеобработанныеУзлы.Получить("Элемент_ПравилаВыгрузкиДанных"), КаталогИсходныхКодов + "ПравилаВыгрузкиДанных\");
	РазобратьКоллекциюПравилаКонвертацииОбъектов(НеобработанныеУзлы.Получить("Элемент_ПравилаКонвертацииОбъектов"), КаталогИсходныхКодов + "ПравилаКонвертацииОбъектов\");	
	РазобратьКоллекциюПараметры();
	
КонецПроцедуры

Процедура РазобратьКоллекциюАлгоритмы(Элемент, КаталогКоллекции)
	
	КорневаяПапкаГрупп = КаталогКоллекции + "Группы\";

	Алгоритмы = Элемент.selectNodes("Алгоритм");

	Для Каждого Алгоритм Из Алгоритмы Цикл

		ИмяАлгоритма = Алгоритм.getAttribute("Имя");		
		КаталогАлгоритма = КаталогКоллекции + ИмяАлгоритма + "\";
		СоздатьКаталог(КаталогАлгоритма);
		
		ЗаписатьРасширениеОбъекта(Алгоритм.selectSingleNode("Текст").text, КаталогАлгоритма, "Текст");
		
		УдаляемыеЭлементы = Алгоритм.selectNodes("Текст");
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Алгоритм.removeChild(УдаляемыйЭлемент);
		КонецЦикла;

		ЗаписатьЭлементВФайл(Алгоритм, КаталогКоллекции + ИмяАлгоритма + ".xml");
		
	КонецЦикла;
	
	ГруппыАлгоритмов = Элемент.selectNodes("Группа");
	
	Для Каждого ГруппаАлгоритмов Из ГруппыАлгоритмов Цикл
		КаталогГруппы = КорневаяПапкаГрупп + ГруппаАлгоритмов.getAttribute("Имя") + "\";
		СоздатьКаталог(КаталогГруппы);
		РазобратьКоллекциюАлгоритмы(ГруппаАлгоритмов, КаталогГруппы)
	КонецЦикла;

КонецПроцедуры

Процедура РазобратьКоллекциюЗапросы(Элемент, КаталогКоллекции)
	
	Если Не Элемент.hasChildNodes() Тогда
		Возврат;
	КонецЕсли;
	
	ГруппыЗапросов = Элемент.selectNodes("Группа");
	
	Для Каждого ГруппаЗапросов Из ГруппыЗапросов Цикл
		КаталогГруппы = КаталогКоллекции + ГруппаЗапросов.getAttribute("Имя") + "\";
		СоздатьКаталог(КаталогГруппы);
		РазобратьКоллекциюЗапросы(ГруппаЗапросов, КаталогГруппы);
	КонецЦикла;

	Запросы = Элемент.selectNodes("Запрос");

	Для Каждого Запрос Из Запросы Цикл
		ЗаписатьЭлементВФайл(Запрос, КаталогКоллекции + Запрос.getAttribute("Имя") + ".xml");
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьКоллекциюПараметры()
	
	Сообщить("Разбор коллекции Параметры...");
	
	Элемент_Параметры = НеобработанныеУзлы.Получить("Элемент_Параметры");
	Параметры = Элемент_Параметры.selectNodes("Параметр");
	КаталогКоллекции = КаталогИсходныхКодов + "Параметры\";
	СоздатьКаталог(КаталогКоллекции);

	Для Каждого Параметр Из Параметры Цикл
		ЗаписатьЭлементВФайл(Параметр, КаталогКоллекции + СокрЛП(Параметр.getAttribute("Имя")) + ".xml");
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьКоллекциюПравилаВыгрузкиДанных(Элемент, КаталогКоллекции)
	
	КорневаяПапкаПравил = КаталогКоллекции + "Правила\";
	КорневаяПапкаГрупп = КаталогКоллекции + "Группы\";

	// РАЗБОР ПРАВИЛ
	ПравилаВыгрузки = Элемент.selectNodes("Правило");
	й = 1;
	Для Каждого Правило Из ПравилаВыгрузки Цикл

		ИмяПравила = Правило.SelectSingleNode("Код").text;
		КаталогПравила = КорневаяПапкаПравил + ИмяПравила;
		// Сообщить("" + й + ". Запись правила... " + ИмяПравила + ".xml");
		й = й + 1;
		СоздатьКаталог(КаталогПравила);
		
		ЗаписатьЭлементВФайл(Правило, КаталогПравила + "\Правило.xml");
		
	КонецЦикла;
	
	// РАЗБОР ГРУПП ПРАВИЛ
	ГруппыПравилВыгрузки = Элемент.selectNodes("Группа");
	
	Для Каждого ГруппаПравил Из ГруппыПравилВыгрузки Цикл
	
		ИмяГруппы = ГруппаПравил.selectSingleNode("Код").text;
			// Сообщить(Элемент.nodeName + " / " + КодГруппы.text);
		КаталогГруппы = КорневаяПапкаГрупп + ИмяГруппы + "\";
		
		СоздатьКаталог(КаталогГруппы);
		
		БазовыеСвойстваГруппы = ГруппаПравил.cloneNode(Истина);
		УдаляемыеЭлементы = БазовыеСвойстваГруппы.selectNodes("Группа|Правило");

		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			// Сообщить("- " + УдаляемыйЭлемент.nodeName);
			БазовыеСвойстваГруппы.removeChild(УдаляемыйЭлемент);
		КонецЦикла;
		
		Если БазовыеСвойстваГруппы.hasChildNodes() Тогда
			ИмяГруппы = БазовыеСвойстваГруппы.selectSingleNode("Код").text;
			ЗаписатьЭлементВФайл(БазовыеСвойстваГруппы, КорневаяПапкаГрупп + ИмяГруппы + ".xml");
		КонецЕсли;
		
		РазобратьКоллекциюПравилаВыгрузкиДанных(ГруппаПравил, КаталогГруппы);

	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаписатьРасширениеОбъекта(Содержание, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	СоздатьКаталог(КаталогРасширений);
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	ЗаписьТекста.ЗаписатьСтроку(Содержание);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Процедура РазобратьКоллекциюОбъектов(ИсходныйЭлемент, ИсходныйКаталог)
	
	Если ИсходныйЭлемент.nodeName = "Группа" Тогда
	ИначеЕсли ИсходныйЭлемент.nodeName = "Правило" Тогда
	Иначе
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
	КонецЕсли;
	
	СоздатьКаталог(КаталогКоллекции);
	
	ДочерниеЭлементы = ИсходныйЭлемент.selectNodes("*");
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		ИмяЭлементаКоллекции = Элемент.SelectSingleNode("Код").text;
		//Сообщить(КаталогКоллекции + ИмяЭлементаКоллекции + ".xml");
		ЗаписатьЭлементВФайл(Элемент, КаталогКоллекции + ИмяЭлементаКоллекции + ".xml");
	КонецЦикла;
	
	//ВызватьИсключение "";
	
КонецПроцедуры

Процедура ЗаписатьЭлементВФайл(Элемент, ИмяФайла)

		ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
		ЭлементыКоллекции.async = false;
		ЭлементыКоллекции.appendChild(Элемент);
		ЭлементыКоллекции.save(ИмяФайла);

КонецПроцедуры

Процедура РазобратьКоллекциюПравилаКонвертацииОбъектов_good(Элемент, КаталогКоллекции)
	
	//Сообщить("Разбор элемента... " + Элемент.nodeName);
	
	// РАЗБОР ПРАВИЛ
	ПравилаКонвертации = Элемент.selectNodes("Правило");
	й = 1;
	Для Каждого Правило Из ПравилаКонвертации Цикл

		ИмяПравила = Правило.SelectSingleNode("Код").text;
		Сообщить("" + й + ". Запись правила... " + ИмяПравила + ".xml");
		й = й + 1;
		
		ЗаписатьЭлементВФайл(Правило, КаталогКоллекции + ИмяПравила + ".xml");
		
	КонецЦикла;
	
	// РАЗБОР ГРУПП ПРАВИЛ
	ГруппыПравилКонвертации = Элемент.selectNodes("Группа");
	
	Для Каждого ГруппаПравил Из ГруппыПравилКонвертации Цикл
	
		КодГруппы = ГруппаПравил.selectSingleNode("Код");
			Сообщить(Элемент.nodeName + " / " + КодГруппы.text);
		КаталогГруппы = КаталогКоллекции + КодГруппы.text + "\";
		СоздатьКаталог(КаталогГруппы);
		РазобратьКоллекциюПравилаКонвертацииОбъектов(ГруппаПравил, КаталогГруппы);

	КонецЦикла;

	// ЗаписатьЭлементВФайл(ГруппаПравил, КаталогГруппы + "ГруппаПравил.xml");
	
	// Сообщить("/" + Элемент.nodeName + "/Группа");
	 УдаляемыеЭлементы = Элемент.selectNodes("Группа|Правило"); // | " + Элемент.nodeName + "/Правило

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Сообщить("- " + УдаляемыйЭлемент.nodeName);
		Элемент.removeChild(УдаляемыйЭлемент);
	КонецЦикла;
	
	Если Элемент.hasChildNodes() Тогда
		ЗаписатьЭлементВФайл(Элемент, КаталогКоллекции + "Группа.xml");
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьКоллекциюПравилаКонвертацииОбъектов(Элемент, КаталогКоллекции)
	
	КорневаяПапкаПравил = КаталогКоллекции + "Правила\";
	КорневаяПапкаГрупп = КаталогКоллекции + "Группы\";
	
	// РАЗБОР ПРАВИЛ
	ПравилаКонвертации = Элемент.selectNodes("Правило");
	й = 1;
	Для Каждого Правило Из ПравилаКонвертации Цикл

		ИмяПравила = Правило.SelectSingleNode("Код").text;
		КаталогПравила = КорневаяПапкаПравил + ИмяПравила + "\";
		// Сообщить("" + й + ". Запись правила... " + ИмяПравила + ".xml");
		й = й + 1;
		СоздатьКаталог(КаталогПравила);
		
		//ЗаписатьЭлементВФайл(Правило, КаталогПравила + "\Правило.xml");
		ЗаписатьЭлементПравилоКонвертации(Правило, КаталогКоллекции);
		
	КонецЦикла;
	
	// РАЗБОР ГРУПП ПРАВИЛ
	ГруппыПравилКонвертации = Элемент.selectNodes("Группа");
	
	Для Каждого ГруппаПравил Из ГруппыПравилКонвертации Цикл
	
		ИмяГруппы = ГруппаПравил.selectSingleNode("Код").text;
			// Сообщить(Элемент.nodeName + " / " + КодГруппы.text);
		КаталогГруппы = КорневаяПапкаГрупп + ИмяГруппы + "\";
		
		СоздатьКаталог(КаталогГруппы);
		
		ОписаниеГруппы = ГруппаПравил.cloneNode(Истина);
		УдаляемыеЭлементы = ОписаниеГруппы.selectNodes("Группа|Правило");

		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			// Сообщить("- " + УдаляемыйЭлемент.nodeName);
			ОписаниеГруппы.removeChild(УдаляемыйЭлемент);
		КонецЦикла;
		
		Если ОписаниеГруппы.hasChildNodes() Тогда
			ИмяГруппы = ОписаниеГруппы.selectSingleNode("Код").text;
			ЗаписатьЭлементВФайл(ОписаниеГруппы, КорневаяПапкаГрупп + ИмяГруппы + ".xml");
		КонецЕсли;
		
		РазобратьКоллекциюПравилаКонвертацииОбъектов(ГруппаПравил, КаталогГруппы);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЭлементПравилоКонвертации(Правило, ИсходныйКаталог)
	
	ИмяПравила = Правило.SelectSingleNode("Код").text;
	
	ДочерниеЭлементы = Правило.selectNodes("*");
	Для Каждого Элемент Из ДочерниеЭлементы Цикл

		Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
			ЗаписатьРасширениеОбъекта(Элемент.text, ИсходныйКаталог + ИмяПравила + "\", Элемент.nodeName);
			Элемент.text = "";
		КонецЕсли;
		
		Если ЭлементЯвляетсяКоллекцией(Элемент.nodeName) Тогда
			РазобратьКоллекциюОбъектов(Элемент, ИсходныйКаталог + ИмяПравила + "\");
		КонецЕсли;		
		
		ЗаписатьЭлементВФайл(Правило, ИсходныйКаталог + ИмяПравила + ".xml");
		//Сообщить(Элемент.nodeName + " > " + Элемент.text);
		
	КонецЦикла;
	
	//ВызватьИсключение("Конец.");
	
КонецПроцедуры


Функция ЭлементЯвляетсяРасширениемОбъекта(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Обработчики Правил конвертации объектов
	МассивЭлементов.Добавить("ПередВыгрузкой");
	МассивЭлементов.Добавить("ПриВыгрузке");
	МассивЭлементов.Добавить("ПослеВыгрузки");
	МассивЭлементов.Добавить("ПослеВыгрузкиВФайл");
	МассивЭлементов.Добавить("ПоследовательностьПолейПоиска");		
	МассивЭлементов.Добавить("ПередЗагрузкой");
	МассивЭлементов.Добавить("ПриЗагрузке");
	МассивЭлементов.Добавить("ПослеЗагрузки");

	// Обработчики Правил выгрузки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Обработчики Правил очистки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередУдалениемОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Текстовое поле алгоритма и запроса
	МассивЭлементов.Добавить("Текст");
	
	// Обработчики Конвертации
	МассивЭлементов.Добавить("ПослеЗагрузкиПравилОбмена");
	МассивЭлементов.Добавить("ПередВыгрузкойДанных");
	МассивЭлементов.Добавить("ПередПолучениемИзмененныхОбъектов");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПередОтправкойИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПередКонвертациейОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиДанных");
	МассивЭлементов.Добавить("ПередЗагрузкойДанных");
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметров");
	МассивЭлементов.Добавить("ПослеПолученияИнформацииОбУзлахОбмена");
	МассивЭлементов.Добавить("ПередЗагрузкойОбъекта");
	МассивЭлементов.Добавить("ПриПолученииИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПослеЗагрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеЗагрузкиДанных");
	
	// Обработчики Параметров
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметра");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементЯвляетсяКоллекцией(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Свойства");
	МассивЭлементов.Добавить("Значения");
	
	// Имена элементов-коллекций конревых элементов
	МассивЭлементов.Добавить("Параметры");
	МассивЭлементов.Добавить("Обработки");
	МассивЭлементов.Добавить("ПравилаКонвертацииОбъектов");
	МассивЭлементов.Добавить("ПравилаВыгрузкиДанных");
	МассивЭлементов.Добавить("ПравилаОчисткиДанных");
	МассивЭлементов.Добавить("Алгоритмы");
	МассивЭлементов.Добавить("Запросы");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Процедура ДобавитьНеобработанныеУзлы(Элемент0, Элемент1 = Неопределено, Элемент2 = Неопределено, Элемент3 = Неопределено, Элемент4 = Неопределено, 
	Элемент5 = Неопределено, Элемент6 = Неопределено, Элемент7 = Неопределено, Элемент8 = Неопределено, Элемент9 = Неопределено)
	
	НеобработанныеУзлы.Вставить("Элемент_" + Элемент0.nodeName, Элемент0);
	
	Если Элемент1 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент1.nodeName, Элемент1) КонецЕсли;
	Если Элемент2 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент2.nodeName, Элемент2) КонецЕсли;
	Если Элемент3 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент3.nodeName, Элемент3) КонецЕсли;
	Если Элемент4 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент4.nodeName, Элемент4) КонецЕсли;
	Если Элемент5 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент5.nodeName, Элемент5) КонецЕсли;
	Если Элемент6 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент6.nodeName, Элемент6) КонецЕсли;
	Если Элемент7 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент7.nodeName, Элемент7) КонецЕсли;
	Если Элемент8 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент8.nodeName, Элемент8) КонецЕсли;	
	Если Элемент9 <> Неопределено Тогда НеобработанныеУзлы.Вставить("Элемент_" + Элемент9.nodeName, Элемент9) КонецЕсли;
	
КонецПроцедуры

НеобработанныеУзлы = Новый Соответствие;
КаталогИсходныхКодов = "src\";

ОбщийФайлПравил = Новый COMОбъект("MSXML2.DOMDocument.6.0");
ОбщийФайлПравил.async = false;
ОбщийФайлПравил.load("ПравилаОбмена.xml");

ЗаписатьКлючевыеСвойстваПравилОбмена();
//ЗаписатьКлючевыеКоллекцииПравилОбмена();

РазобратьКоллекциюАлгоритмы(НеобработанныеУзлы.Получить("Элемент_Алгоритмы"), КаталогИсходныхКодов + "Алгоритмы\");
РазобратьКоллекциюЗапросы(НеобработанныеУзлы.Получить("Элемент_Запросы"), КаталогИсходныхКодов + "Запросы\");
РазобратьКоллекциюПравилаВыгрузкиДанных(НеобработанныеУзлы.Получить("Элемент_ПравилаВыгрузкиДанных"), КаталогИсходныхКодов + "ПравилаВыгрузкиДанных\");
РазобратьКоллекциюПравилаКонвертацииОбъектов(НеобработанныеУзлы.Получить("Элемент_ПравилаКонвертацииОбъектов"), КаталогИсходныхКодов + "ПравилаКонвертацииОбъектов\");	
РазобратьКоллекциюПараметры();
