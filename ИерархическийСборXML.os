Перем ОбщийФайлПравил;
Перем КаталогИсходныхКодов;

Процедура ЗаписатьКлючевыеСвойстваПравилОбмена()
	
	ЭлементПравилаОбмена = ПрочитатьЭлементИзФайла(КаталогИсходныхКодов + "ПравилаОбмена.xml");
	ОбщийФайлПравил.appendChild(ЭлементПравилаОбмена);
	
	ДочерниеЭлементы = ОбщийФайлПравил.documentElement.selectNodes("*");

	Для Каждого Элемент Из ДочерниеЭлементы Цикл

		Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
			ДобавитьРасширениеОбъекта(Элемент.text, КаталогИсходныхКодов, Элемент.nodeName);
		КонецЕсли;
		
		Если ЭлементЯвляетсяКоллекцией(Элемент.nodeName) Тогда
			СобратьКоллекциюОбъектов(Элемент, КаталогИсходныхКодов);
		КонецЕсли;		
		
	КонецЦикла;

	ОбщийФайлПравил.save("ПравилаОбмена_Собранные.xml");

КонецПроцедуры

Процедура РазобратьКоллекциюОбъектов(ИсходныйЭлемент, ИсходныйКаталог)
	
	Если Не ИсходныйЭлемент.hasChildNodes() Тогда
		Возврат;
	КонецЕсли;

	Если ИсходныйЭлемент.nodeName = "Группа" 
		Или ИсходныйЭлемент.nodeName = "Правило" Тогда
		
		ПутьКИмениЭлементаКоллекции = "Код";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";

	ИначеЕсли ИсходныйЭлемент.nodeName = "Свойство" 
		Или ИсходныйЭлемент.nodeName = "Значение" Тогда
		
		ПутьКИмениЭлементаКоллекции = "Код";
		КаталогКоллекции = ИсходныйКаталог;
		// Сообщить(ИсходныйЭлемент.nodeName + " / " + ИсходныйЭлемент.SelectSingleNode("Код").text);
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритмы"
		Или ИсходныйЭлемент.nodeName = "Запросы" 
		Или ИсходныйЭлемент.nodeName = "Параметры" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритм" 
		Или ИсходныйЭлемент.nodeName = "Запрос" 
		Или ИсходныйЭлемент.nodeName = "Параметр" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";
		
	Иначе
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		ПутьКИмениЭлементаКоллекции = "";
	КонецЕсли;
	
	СоздатьКаталог(КаталогКоллекции);
	
	ДочерниеЭлементы = ИсходныйЭлемент.selectNodes("*");
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		
		Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
			ЗаписатьРасширениеОбъекта(Элемент.text, КаталогКоллекции, Элемент.nodeName);
		КонецЕсли;
		
		Если ЭлементСодержитДанныеИлиДочерниеКоллекции(Элемент.nodeName) Тогда
			Если СоздаватьКаталогДляКоллекцииЭлементов(Элемент.nodeName) Тогда
				РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции + Элемент.nodeName + "\");
			Иначе
				РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
			КонецЕсли;
		КонецЕсли;		
		
		Если ЭлементЗаписываетсяОтдельно(Элемент.nodeName) Тогда
			ИмяЭлементаКоллекции = Элемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text;
			ЗаписатьЭлементВФайл(Элемент, КаталогКоллекции + ИмяЭлементаКоллекции + ".xml");
		КонецЕсли;		
		
		Если ЭлементЯвляетсяКоллекцией(Элемент.nodeName) Тогда
			РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
		КонецЕсли;		

	КонецЦикла;
	
	Если Не ИсходныйЭлемент.hasChildNodes() Тогда
		Возврат;
	КонецЕсли;
		
	ИмяЭлементаКоллекции = ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text;
	ЗаписатьЭлементВФайл(ИсходныйЭлемент, ИсходныйКаталог + ИмяЭлементаКоллекции + ".xml");

КонецПроцедуры

Процедура СобратьКоллекциюОбъектов(ИсходныйЭлемент, ИсходныйКаталог)
	
	// Если Не ИсходныйЭлемент.hasChildNodes() Тогда
		// Возврат;
	// КонецЕсли;

	// Если ИсходныйЭлемент.nodeName = "Группа" 
		// Или ИсходныйЭлемент.nodeName = "Правило" Тогда
		
		// ПутьКИмениЭлементаКоллекции = "Код";
		// КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";

	// ИначеЕсли ИсходныйЭлемент.nodeName = "Свойство" 
		// Или ИсходныйЭлемент.nodeName = "Значение" Тогда
		
		// ПутьКИмениЭлементаКоллекции = "Код";
		// КаталогКоллекции = ИсходныйКаталог;

	Если ИсходныйЭлемент.nodeName = "Алгоритмы"
		Или ИсходныйЭлемент.nodeName = "Запросы" 
		Или ИсходныйЭлемент.nodeName = "Параметры" Тогда

		// ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогРодителя = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритм" 
		Или ИсходныйЭлемент.nodeName = "Запрос" 
		Или ИсходныйЭлемент.nodeName = "Параметр" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогРодителя = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";
		
	Иначе
		КаталогРодителя = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		// ПутьКИмениЭлементаКоллекции = "";
	КонецЕсли;
	
	КаталогРодителяНаДиске = Новый Файл(КаталогРодителя);
   Если Не КаталогРодителяНаДиске.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	// Сообщить(КаталогКоллекции);
	// Если ЭлементЯвляетсяРасширениемОбъекта(ИсходныйЭлемент.nodeName) Тогда
		// РасширениеФайлов = "*.bsl";
	// Иначе
		РасширениеФайлов = "*.xml";
	// КонецЕсли;
	
			Сообщить(КаталогРодителя);
	НайденныеФайлы = НайтиФайлы(КаталогРодителя, РасширениеФайлов);
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		ДобавляемыйЭлемент = ПрочитатьЭлементИзФайла(Файл.ПолноеИмя);
		ИсходныйЭлемент.appendChild(ДобавляемыйЭлемент);
		
		ДочерниеЭлементы = ДобавляемыйЭлемент.selectNodes("*");
		Для Каждого Элемент Из ДочерниеЭлементы Цикл
			
			КаталогКоллекции = КаталогКоллекции(КаталогРодителя, ДобавляемыйЭлемент);
			Сообщить(КаталогКоллекции);
			
			Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
				ДобавитьРасширениеОбъекта(Элемент.text, КаталогКоллекции, Элемент.nodeName);
				Сообщить(КаталогКоллекции + " % Ext % " + Элемент.nodeName);				
			КонецЕсли;
			
			Если ЭлементСодержитДанныеИлиДочерниеКоллекции(Элемент.nodeName) Тогда
				// Если СоздаватьКаталогДляКоллекцииЭлементов(Элемент.nodeName) Тогда
					// РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции + Элемент.nodeName + "\");
				// Иначе
					// ИсходныйЭлемент.appendChild(Элемент);
					СобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
					Сообщить(КаталогКоллекции + " % передача % " + Элемент.nodeName);
					
				// КонецЕсли;
			КонецЕсли;		
			
			// Если ЭлементЗаписываетсяОтдельно(Элемент.nodeName) Тогда
				// ИсходныйЭлемент.appendChild(Элемент);
			// КонецЕсли;		
			
			Если ЭлементЯвляетсяКоллекцией(Элемент.nodeName) Тогда
				СобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
			КонецЕсли;		

		КонецЦикла;
	
	КонецЦикла;
	
	// Если Не ИсходныйЭлемент.hasChildNodes() Тогда
		// Возврат;
	// КонецЕсли;
		
	// ИмяЭлементаКоллекции = ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text;
	// ЗаписатьЭлементВФайл(ИсходныйЭлемент, ИсходныйКаталог + ИмяЭлементаКоллекции + ".xml");

КонецПроцедуры


Процедура ЗаписатьРасширениеОбъекта(Содержание, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	СоздатьКаталог(КаталогРасширений);
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	ЗаписьТекста.ЗаписатьСтроку(Содержание);
	ЗаписьТекста.Закрыть();
	
	Содержание = "";

КонецПроцедуры

Процедура ДобавитьРасширениеОбъекта(Содержание, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	
	ЧтениеТекста = Новый ЧтениеТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	СодержимоеФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если СодержимоеФайла <> Неопределено Тогда
		Содержание = СодержимоеФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЭлементВФайл(Элемент, ИмяФайла)

		ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
		ЭлементыКоллекции.async = false;
		ЭлементыКоллекции.appendChild(Элемент);
		ЭлементыКоллекции.save(ИмяФайла);

КонецПроцедуры

Функция ПрочитатьЭлементИзФайла(ИмяФайла)

	ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
	ЭлементыКоллекции.async = false;
	ЭлементыКоллекции.load(ИмяФайла);
	
	Возврат ЭлементыКоллекции.documentElement;
	
КонецФункции

Функция КаталогКоллекции(ИсходныйКаталог, ИсходныйЭлемент)

			Сообщить("=" + ИсходныйЭлемент.nodeName);
	// Если ИсходныйЭлемент.nodeName = "Группа" 
		// Или ИсходныйЭлемент.nodeName = "Правило" Тогда
		
		// ПутьКИмениЭлементаКоллекции = "Код";
		// КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";

	// ИначеЕсли ИсходныйЭлемент.nodeName = "Свойство" 
		// Или ИсходныйЭлемент.nodeName = "Значение" Тогда
		
		// ПутьКИмениЭлементаКоллекции = "Код";
		// КаталогКоллекции = ИсходныйКаталог;

	Если ИсходныйЭлемент.nodeName = "Алгоритмы"
		Или ИсходныйЭлемент.nodeName = "Запросы" 
		Или ИсходныйЭлемент.nodeName = "Параметры" Тогда

		// ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритм" 
		Или ИсходныйЭлемент.nodeName = "Запрос" 
		Или ИсходныйЭлемент.nodeName = "Параметр" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";
		
	Иначе
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		ПутьКИмениЭлементаКоллекции = "";
	КонецЕсли;
	
	Возврат КаталогКоллекции;

КонецФункции


Функция ЭлементЯвляетсяРасширениемОбъекта(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Обработчики Правил конвертации объектов
	МассивЭлементов.Добавить("ПередВыгрузкой");
	МассивЭлементов.Добавить("ПриВыгрузке");
	МассивЭлементов.Добавить("ПослеВыгрузки");
	МассивЭлементов.Добавить("ПослеВыгрузкиВФайл");
	МассивЭлементов.Добавить("ПоследовательностьПолейПоиска");		
	МассивЭлементов.Добавить("ПередЗагрузкой");
	МассивЭлементов.Добавить("ПриЗагрузке");
	МассивЭлементов.Добавить("ПослеЗагрузки");

	// Обработчики Правил выгрузки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Обработчики Правил очистки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередУдалениемОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Текстовое поле алгоритма и запроса
	МассивЭлементов.Добавить("Текст");
	
	// Обработчики Конвертации
	МассивЭлементов.Добавить("ПослеЗагрузкиПравилОбмена");
	МассивЭлементов.Добавить("ПередВыгрузкойДанных");
	МассивЭлементов.Добавить("ПередПолучениемИзмененныхОбъектов");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПередОтправкойИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПередКонвертациейОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиДанных");
	МассивЭлементов.Добавить("ПередЗагрузкойДанных");
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметров");
	МассивЭлементов.Добавить("ПослеПолученияИнформацииОбУзлахОбмена");
	МассивЭлементов.Добавить("ПередЗагрузкойОбъекта");
	МассивЭлементов.Добавить("ПриПолученииИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПослеЗагрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеЗагрузкиДанных");
	
	// Обработчики Параметров
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметра");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементЯвляетсяКоллекцией(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций конревых элементов
	МассивЭлементов.Добавить("Параметры");
	МассивЭлементов.Добавить("Обработки");
	МассивЭлементов.Добавить("ПравилаКонвертацииОбъектов");
	МассивЭлементов.Добавить("ПравилаВыгрузкиДанных");
	МассивЭлементов.Добавить("ПравилаОчисткиДанных");
	МассивЭлементов.Добавить("Алгоритмы");
	МассивЭлементов.Добавить("Запросы");

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Свойства");
	МассивЭлементов.Добавить("Значения");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементСодержитДанныеИлиДочерниеКоллекции(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Группа");
	МассивЭлементов.Добавить("Правило");
	МассивЭлементов.Добавить("Свойство");
	МассивЭлементов.Добавить("Значение");
	
	МассивЭлементов.Добавить("Алгоритм");
	МассивЭлементов.Добавить("Запрос");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция СоздаватьКаталогДляКоллекцииЭлементов(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Группа");
	МассивЭлементов.Добавить("Правило");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;	
	
КонецФункции

Функция ЭлементЗаписываетсяОтдельно(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Параметр");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции


КаталогИсходныхКодов = "src\";

ОбщийФайлПравил = Новый COMОбъект("MSXML2.DOMDocument.6.0");
ОбщийФайлПравил.async = false;

ЗаписатьКлючевыеСвойстваПравилОбмена();
