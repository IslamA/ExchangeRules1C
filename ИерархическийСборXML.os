Перем ОбщийФайлПравил;
Перем КаталогИсходныхКодов;

Процедура СобратьКоллекциюОбъектов(ИсходныйЭлемент, КаталогРодителя)
	
	КаталогРодителяНаДиске = Новый Файл(КаталогРодителя);
   Если Не КаталогРодителяНаДиске.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(КаталогРодителя);
	
	КаталогГруппыПравил = Новый Файл(КаталогРодителя + "Группа\");
	Если КаталогГруппыПравил.Существует() Тогда
		СобратьКоллекциюОбъектов(ИсходныйЭлемент, КаталогРодителя + "Группа\");
	КонецЕсли;

	КаталогГруппаПравил = Новый Файл(КаталогРодителя + "Правило\");
	Если КаталогГруппаПравил.Существует() Тогда
		СобратьКоллекциюОбъектов(ИсходныйЭлемент, КаталогРодителя + "Правило\");
	КонецЕсли;

	// Сообщить(КаталогРодителя);
	НайденныеФайлы = НайтиФайлы(КаталогРодителя, "*.xml");
	Для Каждого Файл Из НайденныеФайлы Цикл
		
	Сообщить(Файл.ПолноеИмя);
		ДобавляемыйЭлемент = ПрочитатьЭлементИзФайла(Файл.ПолноеИмя);
		ИсходныйЭлемент.appendChild(ДобавляемыйЭлемент);
		
		ДочерниеЭлементы = ДобавляемыйЭлемент.selectNodes("*");
		Для Каждого Элемент Из ДочерниеЭлементы Цикл
			
			// Сообщить("@"+Элемент.nodeName);

			КаталогКоллекции = КаталогКоллекции(КаталогРодителя, Элемент);
			// Сообщить(КаталогКоллекции);
			
			Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
				ДобавитьРасширениеОбъекта(Элемент.text, КаталогРодителя + ДополнительныйКаталогЭлемента(ДобавляемыйЭлемент), Элемент.nodeName);
			КонецЕсли;
			
			Если ЭлементСодержитДанныеИлиДочерниеКоллекции(Элемент.nodeName) Тогда
				// Если СоздаватьКаталогДляКоллекцииЭлементов(Элемент.nodeName) Тогда
					// РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции + Элемент.nodeName + "\");
				// Иначе
					// ИсходныйЭлемент.appendChild(Элемент);

					СобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
					
				// КонецЕсли;
			КонецЕсли;		
			
			// Если ЭлементЗаписываетсяОтдельно(Элемент.nodeName) Тогда
				// ИсходныйЭлемент.appendChild(Элемент);
			// КонецЕсли;		
			
			Если ЭлементЯвляетсяКоллекцией(Элемент.nodeName) Тогда
				Сообщить("+++");
				СобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
			КонецЕсли;		

		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаписатьРасширениеОбъекта(Содержание, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	СоздатьКаталог(КаталогРасширений);
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	ЗаписьТекста.ЗаписатьСтроку(Содержание);
	ЗаписьТекста.Закрыть();
	
	Содержание = "";

КонецПроцедуры

Процедура ДобавитьРасширениеОбъекта(Содержание, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	// Сообщить("%" + ИсходныйКаталог);
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	
	ЧтениеТекста = Новый ЧтениеТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	СодержимоеФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если СодержимоеФайла <> Неопределено Тогда
		Содержание = СодержимоеФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЭлементВФайл(Элемент, ИмяФайла)

		ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
		ЭлементыКоллекции.async = false;
		ЭлементыКоллекции.appendChild(Элемент);
		ЭлементыКоллекции.save(ИмяФайла);

КонецПроцедуры

Функция ПрочитатьЭлементИзФайла(ИмяФайла)

	ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
	ЭлементыКоллекции.async = false;
	ЭлементыКоллекции.load(ИмяФайла);
	
	Возврат ЭлементыКоллекции.documentElement;
	
КонецФункции

Функция КаталогКоллекции(ИсходныйКаталог, ИсходныйЭлемент)

	// Если ИсходныйЭлемент.nodeName = "Группа" 
		// Или ИсходныйЭлемент.nodeName = "Правило" Тогда
		
		// ПутьКИмениЭлементаКоллекции = "Код";
		// КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode("Код").text + "\";

	Если ИсходныйЭлемент.nodeName = "Свойства" Или ИсходныйЭлемент.nodeName = "Значения" 
		Или ИсходныйЭлемент.nodeName = "Параметры" Или ИсходныйЭлемент.nodeName = "Обработки" 
		Или ИсходныйЭлемент.nodeName = "ПравилаКонвертацииОбъектов" 
		Или ИсходныйЭлемент.nodeName = "ПравилаВыгрузкиДанных" 
		Или ИсходныйЭлемент.nodeName = "ПравилаОчисткиДанных" 
		Или ИсходныйЭлемент.nodeName = "Алгоритмы" Или ИсходныйЭлемент.nodeName = "Запросы" Тогда

		// ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		Сообщить("---");
		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритм" 
		Или ИсходныйЭлемент.nodeName = "Запрос" 
		Или ИсходныйЭлемент.nodeName = "Параметр" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";
		
	Иначе
		КаталогКоллекции = ИсходныйКаталог;// + ИсходныйЭлемент.nodeName + "\";
		ПутьКИмениЭлементаКоллекции = "";
	КонецЕсли;
	
	Сообщить(ИсходныйЭлемент.nodeName + " :: "+ ИсходныйКаталог + " => " + КаталогКоллекции);
	Возврат КаталогКоллекции;

КонецФункции

Функция ДополнительныйКаталогЭлемента(Элемент)
	
	КаталогЭлемента = "";
	
	Если Элемент.nodeName = "Правило" Тогда

		КаталогЭлемента = Элемент.SelectSingleNode("@Имя").text + "\";

	ИначеЕсли Элемент.nodeName = "Алгоритм" Или Элемент.nodeName = "Запрос" Или Элемент.nodeName = "Параметр" Тогда

		КаталогЭлемента = Элемент.SelectSingleNode("@Имя").text + "\";
		
	КонецЕсли;
	
	Возврат КаталогЭлемента;
		
КонецФункции


Функция ЭлементЯвляетсяРасширениемОбъекта(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Обработчики Правил конвертации объектов
	МассивЭлементов.Добавить("ПередВыгрузкой");
	МассивЭлементов.Добавить("ПриВыгрузке");
	МассивЭлементов.Добавить("ПослеВыгрузки");
	МассивЭлементов.Добавить("ПослеВыгрузкиВФайл");
	МассивЭлементов.Добавить("ПоследовательностьПолейПоиска");		
	МассивЭлементов.Добавить("ПередЗагрузкой");
	МассивЭлементов.Добавить("ПриЗагрузке");
	МассивЭлементов.Добавить("ПослеЗагрузки");

	// Обработчики Правил выгрузки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Обработчики Правил очистки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередУдалениемОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Текстовое поле алгоритма и запроса
	МассивЭлементов.Добавить("Текст");
	
	// Обработчики Конвертации
	МассивЭлементов.Добавить("ПослеЗагрузкиПравилОбмена");
	МассивЭлементов.Добавить("ПередВыгрузкойДанных");
	МассивЭлементов.Добавить("ПередПолучениемИзмененныхОбъектов");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПередОтправкойИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПередКонвертациейОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиДанных");
	МассивЭлементов.Добавить("ПередЗагрузкойДанных");
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметров");
	МассивЭлементов.Добавить("ПослеПолученияИнформацииОбУзлахОбмена");
	МассивЭлементов.Добавить("ПередЗагрузкойОбъекта");
	МассивЭлементов.Добавить("ПриПолученииИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПослеЗагрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеЗагрузкиДанных");
	
	// Обработчики Параметров
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметра");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементЯвляетсяКоллекцией(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций конревых элементов
	МассивЭлементов.Добавить("Параметры");
	МассивЭлементов.Добавить("Обработки");
	МассивЭлементов.Добавить("ПравилаКонвертацииОбъектов");
	МассивЭлементов.Добавить("ПравилаВыгрузкиДанных");
	МассивЭлементов.Добавить("ПравилаОчисткиДанных");
	МассивЭлементов.Добавить("Алгоритмы");
	МассивЭлементов.Добавить("Запросы");

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Свойства");
	МассивЭлементов.Добавить("Значения");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементСодержитДанныеИлиДочерниеКоллекции(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Группа");
	МассивЭлементов.Добавить("Правило");
	МассивЭлементов.Добавить("Свойство");
	МассивЭлементов.Добавить("Значение");
	
	МассивЭлементов.Добавить("Алгоритм");
	МассивЭлементов.Добавить("Запрос");
	МассивЭлементов.Добавить("ПравилаОбмена");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция СоздаватьКаталогДляКоллекцииЭлементов(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Группа");
	МассивЭлементов.Добавить("Правило");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;	
	
КонецФункции

Функция ЭлементЗаписываетсяОтдельно(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Параметр");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции


КаталогИсходныхКодов = "src\";

ОбщийФайлПравил = Новый COMОбъект("MSXML2.DOMDocument.6.0");
ОбщийФайлПравил.async = false;

СобратьКоллекциюОбъектов(ОбщийФайлПравил, КаталогИсходныхКодов);

ОбщийФайлПравил.save("ПравилаОбмена_Собранные.xml");
